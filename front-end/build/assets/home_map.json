{
    "Domains": {
        "content": "<input type=\"button\" value=\"Log out\" onclick=\"_logout();\">\n<input type=\"button\" value=\"Build\" onclick=\"_build_nginx();\">\n<input type=\"button\" value=\"Restart\" onclick=\"_restart_nginx();\">\n<input type=\"button\" value=\"Get applications\" onclick=\"_get_applications();\">\n<input type=\"button\" value=\"Add Application\" onclick=\"_add_application();\">\n<input type=\"button\" value=\"Add Upstream\" onclick=\"_add_upstream();\">\n<input type=\"button\" value=\"Add App\" onclick=\"_add_app();\">\n<input type=\"button\" value=\"Add Domain\" onclick=\"_add_domain();\">\n\n<div id=\"root\"></div>\n",
        "onload": "",
        "init": "const app = document.getElementById('root');\n ;window.app = app;\n",
        "onquit": ""
    },
    "js": "// App\nconst api_address = 'api';\n\nconst api = async (type, obj = {}) => {\n    obj.type = type;\n    const resp = await post(api_address, obj);\n    return await resp.json();\n};\n\n/**\n * Get the list of all domains\n * @returns {Array<string>}\n */\nconst get_domains = async () => await api('get_domains');\n\n/**\n * Get the list of all Applications\n * @requires being-logged\n * @retuns Array[String]\n */\nconst get_applications = async () => await api('get_applications');\n\n\n/**\n * @requires being-logged\n * @param {String} domain_name\n * @param {String} app_name\n */\nconst get_subapp_from_domain = async (domain_name, app_name) => await api('get_subapp_from_domain', { domain_name: domain_name, app_name: app_name });\n\n\n/**\n * @requires being-logged\n * @param {String} domain_name\n */\nconst get_subapps_from_domain = async domain_name => await api('get_apps_from_domain', { domain_name: domain_name });\n\nconst _get_applications = async () => applications = await get_applications();\n\nconst add_application = async app => await api('add_application', app);\n\n\n\n/**\n * apply the settings on the server\n */\nconst apply_settings = async () => await api('apply_settings');\n\n\nconst get_upstreams = async () => await api('get_upstreams');\n\n/**\n * \n * @param {Map<String, String>} app \n */\nconst update_app = async app => await api('update_app', app);\n\n// make ui\nconst add_upstream = async upstream => await api('add_upstream', upstream);\n\n\n\n\nconst get_all_subapps_from_domain = async domain_name => await api('get_all_subapps_from_domain', { domain_name: domain_name });\n\nconst add_domain = async domain => await api('add_domain', domain);\n\nconst add_app = async app => await api('add_app', app);\n\n\n\n// Header stuff\n\nconst add_header = async header => await api('add_header', header);\n\nconst update_header = async header => await api('update_header', header);\n\nconst delete_header = async header => await api('delete_header', header);\n\n\nconst restart_nginx = async () => await api('restart_nginx');\n\n/**\n * send the request to build the nginx files\n */\nconst build_nginx = async () => await api('build_nginx');\n\nlet applications = [];\nlet domains = [];\nlet upstreams = [];\n\nconst login = async () => {\n    const res = await fetch('is_logged');\n    const js = await res.json();\n    if (js.error === true) return;\n    const pprompt = new custom_prompt();\n    let success = false;\n    while (!success) {\n        const password = await pprompt.ask('Password', 'login');\n        const resp = await post('login', { password: password, login: 'admin' });\n        const js = await resp.json();\n        if (!js.error) {\n            pprompt.close();\n            success = true;\n        }\n        else { pprompt.say('wrong password', true); }\n    }\n};\n\nconst _add_header = async (parent, app_name) => {\n    const f = new Form();\n    const name = new Input(null, { name: 'name', placeholder: 'name' });\n    const value = new Input(null, { name: 'value', placeholder: 'value' });\n\n    f.add_input(name, value);\n\n    const p = new multi_prompt('New Header', f);\n    f.send_func = async () => {\n        const obj = f.toJSON();\n        obj.application_name = parent;\n        obj.app_name = app_name;\n        const res = await add_header(obj);\n        if (!res.error) {\n            p.say('Success');\n            upstreams = await load_domains_name();\n        } else { p.say(res.error); }\n    };\n    p.open();\n};\n\n\n\nconst _build_nginx = async () => {\n    const res = await build_nginx();\n    if (res.error) say('error');\n    else say('Success');\n};\n\n\nconst _restart_nginx = async () => {\n    const res = await restart_nginx();\n    if (res.error) say('error');\n    else say('Success');\n}\n\n\nconst _add_upstream = async () => {\n    const f = new Form();\n    const name = new Input(null, { name: 'name', placeholder: 'name' });\n    const path = new Input(null, { name: 'ext_path', placeholder: 'External path' });\n    const port = new Input(null, { name: 'in_path', placeholder: 'Internal path' });\n\n    f.add_input(name, path, port);\n\n    const p = new multi_prompt('New Upstream', f);\n    f.send_func = async () => {\n        const res = await add_upstream(f.toJSON());\n        if (!res.error) {\n            p.say('Success');\n            upstreams = await get_upstreams();\n        } else { p.say(res.error); }\n    };\n    p.open();\n};\n\n\nconst make_sub_app = obj => {\n    const res = {};\n    if (obj.type == 'ws') { obj.in_url = 'placeholder'; }\n    res.application_name = obj.application_name;\n    res.sub_apps = JSON.stringify([{\n        name: obj.app_name,\n        ext_url: obj.ext_url,\n        in_url: obj.in_url,\n        type: obj.type,\n        domain: obj.domain_name,\n        upstream: obj.upstream\n    }]);\n    return res;\n};\n\n\n\n\nconst _add_application = async () => {\n\n    const form = new Form();\n    const l_domains = domains.map(domain => domain.domain.server_name);\n    const domain_name = new Select(l_domains, { name: 'domain_name' });\n\n    const application_name = new Input(null, { label: 'Application name', name: 'application_name', placeholder: 'app_name' });\n    const app_name = new Input(null, { name: 'app_name', placeholder: 'Name' });\n    const ext_url = new Input(null, { name: 'ext_url', placeholder: 'ext_url' });\n    const in_url = new Input(null, { name: 'in_url', placeholder: 'in_url' });\n    const type = new Select(['https', 'http', 'ws'], { name: 'type' });\n    const select_upstream = new Select(['', ...upstreams], { name: 'upstream' });\n\n    form.add_input(application_name, domain_name, app_name, ext_url, in_url, type, select_upstream);\n    const l_prompt = new multi_prompt('New application', form);\n    l_prompt.open();\n    form.send_func = async () => {\n        const sub_app = make_sub_app(form.toJSON());\n        print(sub_app);\n        const res = await add_application(sub_app);\n        if (!res.error) {\n            l_prompt.close();\n            say('success');\n            _get_applications();\n        } else {\n            l_prompt.say(res.error);\n        }\n        // res = await _add_application();\n    };\n};\n\n\nconst _add_domain = () => {\n    const form = new Form();\n    const domain_name = new Input(null, { name: 'domain_name', label: 'Name', placeholder: 'domain name' });\n\n    const listening_port = new Input(null, { name: 'listening_port', placeholder: 'listening port' });\n    const protocol = new Select(['https', 'http', 'ws'], { name: 'protocol', placeholder: 'protocol' });\n    const using_ssl = new Select(['on', 'off'], { name: 'using_ssl' });\n    const ssl_fullchain = new Input(null, { name: 'ssl_fullchain', label: 'fullchain' });\n    const ssl_privkey = new Input(null, { name: 'ssl_privkey', label: 'privkey' });\n\n\n    form.add_input(domain_name, listening_port, protocol, using_ssl, ssl_fullchain, ssl_privkey);\n    const l_prompt = new multi_prompt('New domain', form);\n    l_prompt.open();\n    form.send_func = async () => {\n        const domain = form.toJSON();\n        domain.using_ssl = domain.using_ssl == 'on';\n        const res = await add_domain(domain);\n        if (!res.error) {\n            l_prompt.close();\n            say('Success');\n            load_domains_name();\n        } else {\n            l_prompt.say(res.error);\n        }\n    }\n}\n\n\n\n// beginning of routines\n\n// const app = document.getElementById('root'); // defined in the init.js\n\nconst build_bottom_app_update = () => {\n    const l_input = document.createElement('input');\n    const d = document.createElement('div');\n    l_input.type = 'button';\n    l_input.value = 'Apply';\n    l_input.onclick = async () => {\n        const res = await apply_settings();\n        if (res.error != false) { d.innerHTML = 'Error applying changes'; }\n        else {\n            d.innerHTML = 'Successfully applied';\n            load_domains_name();\n        }\n    }\n    const p = document.createElement('p');\n    p.innerHTML = 'Success';\n    d.appendChild(p);\n    d.appendChild(l_input);\n    return d;\n}\n\n\nconst logout = async () => {\n    const res = await fetch('logout');\n    return await res.json();\n};\n\n\nconst _logout = async () => {\n    const res = await logout();\n    if (res.error) { say('failed to logout'); }\n    else { document.body.innerHTML = ''; say('logged out'); }\n}\n\nconst _add_app = async () => {\n    // make prompt with select filled with already existing applications\n    const f = new Form();\n    const _applications = new Select(applications, { name: 'application_name', label: 'Parent application' });\n    const app_name = new Input(null, { name: 'app_name', placeholder: 'App name' });\n    const ext_url = new Input(null, { name: 'ext_url', placeholder: 'External URL' });\n    const in_url = new Input(null, { name: 'in_url', placeholder: 'Internal URL' });\n    const type = new Select(['https', 'http', 'ws'], { name: 'protocol', label: 'Type' });\n    const upstream_name = new Select(['', ...upstreams], { name: 'upstream', label: 'Upstream' });\n    const l_domains = domains.map(domain => domain.domain.server_name);\n    const domain_name = new Select(l_domains, { name: 'domain_name', label: 'Domain' });\n\n    f.add_input(_applications, app_name, ext_url, in_url, type, domain_name, upstream_name);\n    const pprompt = new multi_prompt('New redirection', f);\n    pprompt.open();\n    f.send_func = async () => {\n        const l_obj = f.toJSON();\n        if (l_obj.protocol == 'ws') { l_obj.in_url = 'placeholder'; }\n        const t = await add_app(l_obj);\n        if (t.error === false) {\n            pprompt.say('success');\n            load_domains_name();\n        } else {\n            pprompt.say(t.error);\n        }\n    };\n};\n\nconst _update_app = async app => {\n    // set the update app function\n    const obj = app.form.toJSON();\n    obj.old_domain = app.old_domain;\n    obj.parent = app.parent;\n    obj.old_name = app.old_name;\n    if (obj.protocol == 'ws') { obj.in_url = 'placeholder'; }\n    const res = await update_app(obj);\n    if (res.error !== false) {\n        app.prompt.say(res.error);\n    } else {\n        app.prompt.p.innerHTML = '';\n        app.prompt.p.appendChild(build_bottom_app_update());\n        load_domains_name()\n    }\n}\n\nconst load_domains_name = async () => {\n    domains = [];\n    const domains_name = await get_domains();\n    const d = document.createElement('div');\n    const upstreams_name = await get_upstreams();\n    upstreams = upstreams_name;\n    await domains_name.asyncForEach(async (domain, i) => {\n        const apps = await get_all_subapps_from_domain(domain);\n        const l_apps = {};\n\n        await apps.asyncForEach(async app => {\n            l_apps[app.ext_route] = new App(app.name, app.ext_route, app.in_route,\n                app.upstream, app.type, upstreams_name, domains_name, app.parent, app.headers, app.is_transparent, _update_app);\n        });\n        const dl = new Domain(domain, l_apps);\n\n        domains.push({ order: i, domain: dl }); // order is i for now will be corrected later \n\n    });\n    domains.sort(sort_objects_by('order'));\n    domains.forEach(domain => d.appendChild(domain.domain.render()));\n\n    app.innerHTML = '';\n    app.appendChild(d);\n}\n\n// init the app\n(async () => {\n\n    await login();\n    await load_domains_name();\n    await _get_applications();\n    print('applications loaded');\n    print(applications);\n\n})();\n\n ;window._get_applications = _get_applications;\nwindow._add_application = _add_application;\nwindow._add_upstream = _add_upstream;\nwindow._build_nginx = _build_nginx;\nwindow._restart_nginx = _restart_nginx;\nwindow._logout = _logout;\nwindow._add_app = _add_app;\nwindow._add_domain = _add_domain;\nwindow.applications = applications;\nwindow.get_applications\n = get_applications\n;\n"
}